{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 Welcome to my orphanage of side-projects, ideas and just random snippets of stuff that I find interesting. Warning Things on here may be half-baked and quality is not guaranteed ;-). You have been warned. Projects \u00b6 Feel free to visit one of my other more fleshed out projects :) My Smart Home Setup Social media \u00b6 Twitter GitHub IMDB: favourite TV shows","title":"Home"},{"location":"#home","text":"Welcome to my orphanage of side-projects, ideas and just random snippets of stuff that I find interesting. Warning Things on here may be half-baked and quality is not guaranteed ;-). You have been warned.","title":"Home"},{"location":"#projects","text":"Feel free to visit one of my other more fleshed out projects :) My Smart Home Setup","title":"Projects"},{"location":"#social-media","text":"Twitter GitHub IMDB: favourite TV shows","title":"Social media"},{"location":"cloud/","text":"AWS Developer Associate \u00b6 Desired certification: https://aws.amazon.com/certification/certified-developer-associate/ Learning material: https://www.freecodecamp.org/news/pass-the-aws-developer-associate-exam-with-this-free-16-hour-course/ https://digitalcloud.training/amazon-aws-free-certification-training-developer-associate/ Exam Info \u00b6 72% correct required for pass 65 Questions (18 could be wrong) duration 130min -> 2min per question Question Types \u00b6 Multiple Choice: select 1 out of 4 Multiple Responses: select 2 or more out of 5 Exam breakdown \u00b6 22% Deployment (14.3 Q) 26% Security (16.9 Q) 30% Development with AWS Services (19.5 Q) 10% Refactoring (6.5 Q) 12% Monitoring and Troubleshooting (7.8 Q) Recommended Whitepapers \u00b6 Architecting for the Cloud: AWS Best Practices Practicing Continuous Integration and Continuous Delivery on AWS Accelerating Software Delivery with DevOps Microservices on AWS Running Containerized Microservices on AWS Blue/Green Deployments on AWS Serverless Architecture with AWS Lambda Optimizing Enterprise Economics with Serverless Architecture Elastic Beanstalk (EB) \u00b6 Type: PaaS Does: Quickly deploy & manage web-apps without worrying about the underlying infrastructure Note: Not recommended for production applications (enterprise, large companies) Elastic Beanstalk is powered by CloudFormation templates that set up: Load Balancer, Autoscaling, DB, EC2, Monitoring etc. Supported Languages: Go, NodeJS (ExpressJS), Java, Ruby (Rails), ASP.NET, Python (Django), PHP (Laravel), Docker Choose environment: Web vs Worker, typically 1 web + 1 worker current: https://youtu.be/RrKRN9zRBWs?t=1541 EB Deployment Policies \u00b6 EB Deployment is In-Place. All At Once Deployment: Deploys the new application to all instances at the same time, take all instances out of service while the deployment is executed. Then server become available again. This has downtime. Is fast but dangerous. Rolling Deployment: Takes two instances (out of n) down and updates them. The instances are out of service during update. Re-attaches them when they're healthy. No downtime. Rolling With Additional Batch: Launch new instances to replace the ones that are taken down for updating. This keeps the same number of instances available to the consumer. There's no reduced capacity. Immutable: Creates a new Auto Scaling Group (ASG) with a new EC2 instance in it. Deploys the updated version on the new EC2 instances. Points the elastic load balancer (ELB) to the new ASG and delete the old ASG which terminates the old EC2 instances. For rollback purposes the old ASG and EC2 instance can also be kept until we're sure that we won't need to rollback. This is the safest way to deploy. Method speed no downtime no dns change rollback failure impact code deployed All at once fast false true manual downtime existing Rolling medium true true manual single batch out of service, if any were successful mix of old/new existing Rolling with additional batches medium true true manual mix of old/new existing Immutable slow true true switch back to old AGS, stop new instance minimal new blue/green slow true false swap url minimal new DNS changes have to propagate first, which can make it slower In-Place vs. Blue/Green Deployments \u00b6 EB performs In-Place deployments by default. It depends on the scope as to which strategies we consider In-Place. + For EB: All at once, Rolling, Rolling with additional batch, Immutable + For the scope of a server: All at once, Rolling + For the scope of an uninterrupted server: Zero-downtime deployments where blue/green occurs on the server itself. E.g. handled by starting new spring boot app on the same server with a different url and having a mechanism to switch over. Blue/Green deployments in the context of EB is swapping EB environments and this occurs at DNS level. If it all happens in the same environment it's not blue/green. Switching at load balancer level (ELB) is better than at DNS level because with DNS there could be an interruption of service due to DNS propagation. Blue/Green with EB requires that the database is outside of EB envs, because envs are terminated with loss of all their resources. EB Configuration files \u00b6 .ebextensions: contains config files (*.config). In .config files we can control: option settings, linux/windows server configs, custom resources. env.yaml: name of environment, solution stack, environment links (connect web + worker), load balancer etc. linux server config: packages to be installed, user groups, users, files on ec2 inline or url, commands to run before application is installed, services (nginx etc.), container commands used our own application: e.g. start-server.py etc. EB CLI \u00b6 Clone repo and install. Basic commands are self-explanatory. EB Custom Image \u00b6 A custom AMI (Amazon Machine Image) is useful if we have a lot of software to install that isn't included in standard AMIs (improves provisioning time). Workflow: AWS Docs to find existing AMIs, one that comes closest to what we want so we can use it as a base CLI -> describe-platform-version , get ImageId (of AMI) Got to EC2 marketplace -> community section, paste id to find image Launch new EC2 server, log-in (sessions-manager or ssh) install desired packages and configs bake new AMI, get id of that AMI and use it in our config Configuring RDS (relational database) \u00b6 Can be inside or outside of EB environment. Inside is intended more for developers as the db is terminated if the env is terminated. However with in-place deployments this would work since the environment is never terminated. Outside is intended for productions. The db is created separate from the EB env, so it's not terminated with the environment.","title":"AWS Developer Associate"},{"location":"cloud/#aws-developer-associate","text":"Desired certification: https://aws.amazon.com/certification/certified-developer-associate/ Learning material: https://www.freecodecamp.org/news/pass-the-aws-developer-associate-exam-with-this-free-16-hour-course/ https://digitalcloud.training/amazon-aws-free-certification-training-developer-associate/","title":"AWS Developer Associate"},{"location":"cloud/#exam-info","text":"72% correct required for pass 65 Questions (18 could be wrong) duration 130min -> 2min per question","title":"Exam Info"},{"location":"cloud/#question-types","text":"Multiple Choice: select 1 out of 4 Multiple Responses: select 2 or more out of 5","title":"Question Types"},{"location":"cloud/#exam-breakdown","text":"22% Deployment (14.3 Q) 26% Security (16.9 Q) 30% Development with AWS Services (19.5 Q) 10% Refactoring (6.5 Q) 12% Monitoring and Troubleshooting (7.8 Q)","title":"Exam breakdown"},{"location":"cloud/#recommended-whitepapers","text":"Architecting for the Cloud: AWS Best Practices Practicing Continuous Integration and Continuous Delivery on AWS Accelerating Software Delivery with DevOps Microservices on AWS Running Containerized Microservices on AWS Blue/Green Deployments on AWS Serverless Architecture with AWS Lambda Optimizing Enterprise Economics with Serverless Architecture","title":"Recommended Whitepapers"},{"location":"cloud/#elastic-beanstalk-eb","text":"Type: PaaS Does: Quickly deploy & manage web-apps without worrying about the underlying infrastructure Note: Not recommended for production applications (enterprise, large companies) Elastic Beanstalk is powered by CloudFormation templates that set up: Load Balancer, Autoscaling, DB, EC2, Monitoring etc. Supported Languages: Go, NodeJS (ExpressJS), Java, Ruby (Rails), ASP.NET, Python (Django), PHP (Laravel), Docker Choose environment: Web vs Worker, typically 1 web + 1 worker current: https://youtu.be/RrKRN9zRBWs?t=1541","title":"Elastic Beanstalk (EB)"},{"location":"cloud/#eb-deployment-policies","text":"EB Deployment is In-Place. All At Once Deployment: Deploys the new application to all instances at the same time, take all instances out of service while the deployment is executed. Then server become available again. This has downtime. Is fast but dangerous. Rolling Deployment: Takes two instances (out of n) down and updates them. The instances are out of service during update. Re-attaches them when they're healthy. No downtime. Rolling With Additional Batch: Launch new instances to replace the ones that are taken down for updating. This keeps the same number of instances available to the consumer. There's no reduced capacity. Immutable: Creates a new Auto Scaling Group (ASG) with a new EC2 instance in it. Deploys the updated version on the new EC2 instances. Points the elastic load balancer (ELB) to the new ASG and delete the old ASG which terminates the old EC2 instances. For rollback purposes the old ASG and EC2 instance can also be kept until we're sure that we won't need to rollback. This is the safest way to deploy. Method speed no downtime no dns change rollback failure impact code deployed All at once fast false true manual downtime existing Rolling medium true true manual single batch out of service, if any were successful mix of old/new existing Rolling with additional batches medium true true manual mix of old/new existing Immutable slow true true switch back to old AGS, stop new instance minimal new blue/green slow true false swap url minimal new DNS changes have to propagate first, which can make it slower","title":"EB Deployment Policies"},{"location":"cloud/#in-place-vs-bluegreen-deployments","text":"EB performs In-Place deployments by default. It depends on the scope as to which strategies we consider In-Place. + For EB: All at once, Rolling, Rolling with additional batch, Immutable + For the scope of a server: All at once, Rolling + For the scope of an uninterrupted server: Zero-downtime deployments where blue/green occurs on the server itself. E.g. handled by starting new spring boot app on the same server with a different url and having a mechanism to switch over. Blue/Green deployments in the context of EB is swapping EB environments and this occurs at DNS level. If it all happens in the same environment it's not blue/green. Switching at load balancer level (ELB) is better than at DNS level because with DNS there could be an interruption of service due to DNS propagation. Blue/Green with EB requires that the database is outside of EB envs, because envs are terminated with loss of all their resources.","title":"In-Place vs. Blue/Green Deployments"},{"location":"cloud/#eb-configuration-files","text":".ebextensions: contains config files (*.config). In .config files we can control: option settings, linux/windows server configs, custom resources. env.yaml: name of environment, solution stack, environment links (connect web + worker), load balancer etc. linux server config: packages to be installed, user groups, users, files on ec2 inline or url, commands to run before application is installed, services (nginx etc.), container commands used our own application: e.g. start-server.py etc.","title":"EB Configuration files"},{"location":"cloud/#eb-cli","text":"Clone repo and install. Basic commands are self-explanatory.","title":"EB CLI"},{"location":"cloud/#eb-custom-image","text":"A custom AMI (Amazon Machine Image) is useful if we have a lot of software to install that isn't included in standard AMIs (improves provisioning time). Workflow: AWS Docs to find existing AMIs, one that comes closest to what we want so we can use it as a base CLI -> describe-platform-version , get ImageId (of AMI) Got to EC2 marketplace -> community section, paste id to find image Launch new EC2 server, log-in (sessions-manager or ssh) install desired packages and configs bake new AMI, get id of that AMI and use it in our config","title":"EB Custom Image"},{"location":"cloud/#configuring-rds-relational-database","text":"Can be inside or outside of EB environment. Inside is intended more for developers as the db is terminated if the env is terminated. However with in-place deployments this would work since the environment is never terminated. Outside is intended for productions. The db is created separate from the EB env, so it's not terminated with the environment.","title":"Configuring RDS (relational database)"},{"location":"operating-systems/mac-os/","text":"macOS \u00b6 Shell \u00b6 Kill application on port \u00b6 Command: lsof -ti:port | xargs kill Example Usage: lsof -ti:8080 | xargs kill Useful apps \u00b6 AllToMP3 : Download Spotify playlists as mp3 files. Useful to load songs onto apple watch for offline listening. Uses YouTube in the background to download songs. Visual Studio Code : Free text editor/mini IDE of choice when not using IntelliJ. Spectacle : Re-size windows with keyboard commands (e.g. use half, quarter screen etc.) Owly : Prevent the mac from falling asleep, useful when streaming video to TV Sound Control : Volume controls for individual apps & external monitors etc. iTerm2 : Terminal replacement Homebrew : Packet manager, like apt-get on linux, simplifies installing development dependencies etc. Google Chrome : Browser of choice","title":"macOS"},{"location":"operating-systems/mac-os/#macos","text":"","title":"macOS"},{"location":"operating-systems/mac-os/#shell","text":"","title":"Shell"},{"location":"operating-systems/mac-os/#kill-application-on-port","text":"Command: lsof -ti:port | xargs kill Example Usage: lsof -ti:8080 | xargs kill","title":"Kill application on port"},{"location":"operating-systems/mac-os/#useful-apps","text":"AllToMP3 : Download Spotify playlists as mp3 files. Useful to load songs onto apple watch for offline listening. Uses YouTube in the background to download songs. Visual Studio Code : Free text editor/mini IDE of choice when not using IntelliJ. Spectacle : Re-size windows with keyboard commands (e.g. use half, quarter screen etc.) Owly : Prevent the mac from falling asleep, useful when streaming video to TV Sound Control : Volume controls for individual apps & external monitors etc. iTerm2 : Terminal replacement Homebrew : Packet manager, like apt-get on linux, simplifies installing development dependencies etc. Google Chrome : Browser of choice","title":"Useful apps"},{"location":"operating-systems/windows/","text":"windows \u00b6 Pin Batch File to Taskbar \u00b6 Context menu -> new Shortcut -> cmd /c \"C:\\path\\to\\batch\\file\" -> Next -> Choose Icon -> Context Menu -> Pin to taskbar","title":"windows"},{"location":"operating-systems/windows/#windows","text":"","title":"windows"},{"location":"operating-systems/windows/#pin-batch-file-to-taskbar","text":"Context menu -> new Shortcut -> cmd /c \"C:\\path\\to\\batch\\file\" -> Next -> Choose Icon -> Context Menu -> Pin to taskbar","title":"Pin Batch File to Taskbar"},{"location":"things/drinks/","text":"Gin Hugo \u00b6 Elderflower (Holunderbl\u00fcten) sirup Ice Sparkling Water 1 shot gin Prosecco (optional, perishable) Optional greens (if available) mint leaves lime wedge","title":"Drinks"},{"location":"things/drinks/#gin-hugo","text":"Elderflower (Holunderbl\u00fcten) sirup Ice Sparkling Water 1 shot gin Prosecco (optional, perishable) Optional greens (if available) mint leaves lime wedge","title":"Gin Hugo"},{"location":"travel/switzerland/","text":"Hikes \u00b6 Arth Goldau Bergsturz \u00b6 Takes about 5h. Easily accessible by train via Arth-Goldau Bahnhof. Has some nice views of the rock falls (Bergsturz) that ocurred in 1806. Route on Google Maps . Cool Locations \u00b6 Schlithorn , Lauterbrunnen area: has revolving restaurant that was in James Bond movie. has thrill-walk (glass bridge etc.), nice area for hiking as well","title":"Switzerland"},{"location":"travel/switzerland/#hikes","text":"","title":"Hikes"},{"location":"travel/switzerland/#arth-goldau-bergsturz","text":"Takes about 5h. Easily accessible by train via Arth-Goldau Bahnhof. Has some nice views of the rock falls (Bergsturz) that ocurred in 1806. Route on Google Maps .","title":"Arth Goldau Bergsturz"},{"location":"travel/switzerland/#cool-locations","text":"Schlithorn , Lauterbrunnen area: has revolving restaurant that was in James Bond movie. has thrill-walk (glass bridge etc.), nice area for hiking as well","title":"Cool Locations"}]}